/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas2;

import TelasAntigas.TelaCadastro2;
import Codigos.ArduinoSerial;
import Codigos.Conexao;
import Codigos.Pessoa;
import br.com.parg.viacep.ViaCEP;
import br.com.parg.viacep.ViaCEPException;
import java.awt.Component;
import java.awt.Image;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Renan
 */
public class TelaCadastroInternal extends javax.swing.JInternalFrame {

    private String conteudo;
    private String caminho;
    private String log;
    private String registroLog;
    private int possui_foto = 0;
    private int func;
        
    ArduinoSerial a = new ArduinoSerial("COM7");
    /**
     * Creates new form TelaCadastroInternal
     */
    
    
    public TelaCadastroInternal() {
        initComponents();
        a.initialize();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jCTipo = new javax.swing.JComboBox<>();
        jFRg = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jFCPF = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jTFCodigo = new javax.swing.JTextField();
        jBCad = new javax.swing.JButton();
        jBBuscar = new javax.swing.JButton();
        jBEdit = new javax.swing.JButton();
        jBDel = new javax.swing.JButton();
        jFDTNasc = new javax.swing.JFormattedTextField();
        jBLimp = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jCSerie = new javax.swing.JComboBox<>();
        jLFoto = new javax.swing.JLabel();
        jBAddImagem = new javax.swing.JButton();
        jButCEP = new javax.swing.JButton();
        jBGravarRFID = new javax.swing.JButton();
        jTFNome = new Codigos.JCTextField();
        jTCidade = new Codigos.JCTextField();
        jTUF = new Codigos.JCTextField();
        jTRua = new Codigos.JCTextField();
        jTCompl = new Codigos.JCTextField();
        jTFEmail = new Codigos.JCTextField();
        jTbairro = new Codigos.JCTextField();
        jTNum = new Codigos.JCTextField();
        jFCEP = new Codigos.JCTextField();
        jPSenha = new Codigos.JCPasswordField();

        setClosable(true);
        setTitle("Cadastro");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setName(""); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 0, 204)));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel12.setText("CPF* :");

        jCTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "Aluno", "Responsável", "Professor", "Funcionário" }));
        jCTipo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jCTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCTipoActionPerformed(evt);
            }
        });

        jFRg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        try {
            jFRg.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFRg.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setText("RG* :");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Tipo* :");

        jFCPF.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        try {
            jFCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFCPF.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Código:");

        jTFCodigo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTFCodigo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTFCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFCodigoKeyTyped(evt);
            }
        });

        jBCad.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jBCad.setText("Cadastrar");
        jBCad.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCadActionPerformed(evt);
            }
        });

        jBBuscar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jBBuscar.setText("Buscar");
        jBBuscar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jBEdit.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jBEdit.setText("Editar");
        jBEdit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEditActionPerformed(evt);
            }
        });

        jBDel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jBDel.setText("Deletar");
        jBDel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDelActionPerformed(evt);
            }
        });

        jFDTNasc.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        try {
            jFDTNasc.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFDTNasc.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jBLimp.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jBLimp.setText("Limpar");
        jBLimp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBLimp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimpActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Data de Nascimento* :");

        jLabel21.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel21.setText("Série:");

        jCSerie.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione...", "1º Ano", "2º Ano", "3º Ano", "4º Ano", "5º Ano", "6º Ano", "7º Ano", "8º Ano", "9º Ano", "1º Colegial", "2º Colegial", "Colegial 3" }));
        jCSerie.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jCSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCSerieActionPerformed(evt);
            }
        });

        jLFoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jBAddImagem.setText("IMAGEM");
        jBAddImagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAddImagemActionPerformed(evt);
            }
        });

        jButCEP.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButCEP.setText("Buscar");
        jButCEP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButCEP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButCEPActionPerformed(evt);
            }
        });

        jBGravarRFID.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jBGravarRFID.setText("Gravar Cartão");
        jBGravarRFID.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBGravarRFID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGravarRFIDActionPerformed(evt);
            }
        });

        jTFNome.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTFNome.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTFNome.setPlaceholder("Nome* : ");

        jTCidade.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTCidade.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTCidade.setPlaceholder("Cidade* :");

        jTUF.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTUF.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTUF.setPlaceholder("UF* : ");

        jTRua.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTRua.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTRua.setPlaceholder("Rua* :");

        jTCompl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTCompl.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTCompl.setPlaceholder("Complemento:");

        jTFEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTFEmail.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTFEmail.setPlaceholder("Email:");

        jTbairro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTbairro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTbairro.setPlaceholder("Bairro* :");

        jTNum.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTNum.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTNum.setPlaceholder("Número* : ");

        jFCEP.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jFCEP.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jFCEP.setPlaceholder("CEP:");
        jFCEP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFCEPActionPerformed(evt);
            }
        });
        jFCEP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jFCEPKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jFCEPKeyTyped(evt);
            }
        });

        jPSenha.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPSenha.setPlaceholder("Senha* :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jBCad, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(jBBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(jBEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(jBDel, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(jBLimp, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(4, 4, 4)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTFCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(47, 47, 47)
                                                .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(4, 4, 4)
                                                .addComponent(jCSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jBGravarRFID, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jTFNome, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(89, 89, 89)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jFDTNasc, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(160, 160, 160)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLFoto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jBAddImagem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 179, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTCidade, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(18, 18, 18)
                                        .addComponent(jFRg, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36)
                                        .addComponent(jLabel12)))
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTUF, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(jFCPF))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTRua, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                    .addComponent(jTFEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jTNum, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTbairro, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTCompl, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jPSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jFCEP, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(jButCEP, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jCTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(21, 21, 21)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTFCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jBGravarRFID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTFNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFDTNasc, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLFoto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBAddImagem)
                        .addGap(33, 33, 33)))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFCEP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButCEP, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTCidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTUF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTRua, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTbairro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTCompl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jFCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTFEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jFRg, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBCad, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jBEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBDel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLimp, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Cadastro", new javax.swing.ImageIcon(getClass().getResource("/Imagens/ICONPerfil.png")), jPanel1); // NOI18N

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 1340, 660));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFCEPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFCEPKeyPressed
        // Executa o Botão de buscar CEP pela tecla ENTER
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            jButCEP.doClick();
        }
    }//GEN-LAST:event_jFCEPKeyPressed

    private void jBGravarRFIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGravarRFIDActionPerformed
      // Botão que grava o codigo digitado no novo cartão    
      
        String gravacao = jTFCodigo.getText()+"#";

        a.send(gravacao);
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            Logger.getLogger(TelaCadastroInternal.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(this, a.read());
        a.close();
        a.initialize();
        
    }//GEN-LAST:event_jBGravarRFIDActionPerformed

    private void verificaData(String data){
        //Converte a data pro formato que o banco lê
        
        if(data.equals("  /  /    ")){
            jFDTNasc.setText(null);
        }else{
            String dataDividida[] = data.split("/");
            if(Integer.parseInt(dataDividida[0])>31 || Integer.parseInt(dataDividida[0])<1){
                jFDTNasc.setText(null);
            }else{
                if(Integer.parseInt(dataDividida[1])>12 || Integer.parseInt(dataDividida[1])<1){
                    jFDTNasc.setText(null);
                }
            }
        }
    }
    
    private void jButCEPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButCEPActionPerformed
        ViaCEP vc = new ViaCEP();
// Web Service para busca de endereço por CEP
        try {
            vc.buscar(jFCEP.getText());
            jTCidade.setText(vc.getLocalidade());
            jTRua.setText(vc.getLogradouro());
            jTUF.setText(vc.getUf());
            jTCompl.setText(vc.getComplemento());
            jTbairro.setText(vc.getBairro());
            
        } catch (ViaCEPException ex) {
          //  Logger.getLogger(TelaCadastroInternal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, " CEP não encontado!\n Por Favor digite novamente! ");
        }
    }//GEN-LAST:event_jButCEPActionPerformed

    private void jBAddImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAddImagemActionPerformed
        // TODO add your handling code here:

        JFileChooser arquivo = new JFileChooser();
        arquivo.setDialogTitle("Selecione uma foto"); //Titulo do explorador de arquivos
        arquivo.setFileSelectionMode(JFileChooser.FILES_ONLY); // Filtro de arquivos

        int opc = arquivo.showOpenDialog(this); //Abre o explorador de arquivos
        if(opc == JFileChooser.APPROVE_OPTION){ //Verifica se algo foi selecionado, Se sim...
            File f = new File("Caminho");
            f = arquivo.getSelectedFile();

            conteudo = f.getAbsolutePath();
           

            ImageIcon imagem = new ImageIcon(arquivo.getSelectedFile().getPath());
            jLFoto.setIcon(new ImageIcon(imagem.getImage().getScaledInstance(jLFoto.getWidth(), jLFoto.getHeight(), Image.SCALE_DEFAULT)));
            possui_foto = 1;
        }else if(opc == JFileChooser.CANCEL_OPTION){// Se não
            JOptionPane.showMessageDialog(this, "nenhum arquivo selecionado");
        }
    }//GEN-LAST:event_jBAddImagemActionPerformed

    private void jCSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCSerieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCSerieActionPerformed

    private void jBLimpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimpActionPerformed
        // TODO add your handling code here:
        //Metodo que "Limpa" todas as caixas de texto

        jTFCodigo.setText(null);
        jTFNome.setText(null);
        jTRua.setText(null);
        jTNum.setText(null);
        jTCidade.setText(null);
        jTbairro.setText(null);
        jFDTNasc.setText(null);
        jTCompl.setText(null);
        jTUF.setText(null);
        jFRg.setText(null);
        jFCPF.setText(null);
        jCTipo.setSelectedItem("Selecione...");
        jTFEmail.setText(null);
        jPSenha.setText(null);
        jCSerie.setSelectedItem("Selecione...");
        jLFoto.setIcon(null);
        jFCEP.setText(null);
        jBCad.setEnabled(true);
    }//GEN-LAST:event_jBLimpActionPerformed

    private void jBDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDelActionPerformed
        // TODO add your handling code here:
        Conexao c = new Conexao();

        int cod = Integer.parseInt(jTFCodigo.getText());

        //Comando que realiza a exclusão de um cadastro com base no codigo da pessoa
        String del = "update pcc_tb_pessoas set Pess_ST_Situacao = 'Desativado' where pess_int_codigo = '"+cod+"';";

        try {
            c.conectar();
            if(c.runSql(del)){
                JOptionPane.showMessageDialog(null, "Excluido com sucesso");
                //Registra na tabela de LOG o código do usario que realizou as mudanças!
                log = "Usuário desativado. ID: "+cod+";";
                registroLog = "insert into pcc_tb_log values(null,"+func+",'"+log+"', default);";
                c.runSql(registroLog);
            }else{
                JOptionPane.showMessageDialog(null, "Não foi possivel excluir");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBDelActionPerformed

    private void jBEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEditActionPerformed
        verificaData(jFDTNasc.getText());
        ArrayList<String> verifica = campo_vazio();
        if(verifica.isEmpty()){
        Pessoa a = new Pessoa();
        Conexao c = new Conexao();
        String codCaminho = null;
        
        //Insere os dados preenchidos pelo usuario nas variaveis
        a.setRA(Integer.parseInt(jTFCodigo.getText()));
        a.setNome(jTFNome.getText().toUpperCase());
        a.setRua(jTRua.getText().toUpperCase());
        a.setCep(Integer.parseInt(jFCEP.getText()));
        a.setNumero(jTNum.getText());
        a.setBairro(jTbairro.getText().toUpperCase());
        a.setComplemento(jTCompl.getText().toUpperCase());
        a.setUf(jTUF.getText().toUpperCase());
        a.setCidade(jTCidade.getText().toUpperCase());
        a.setDataNasc(jFDTNasc.getText());
        a.setRg(jFRg.getText());
        a.setCpf(jFCPF.getText());
        a.setTipo((String) jCTipo.getSelectedItem());
        a.setEmail(jTFEmail.getText());
        a.setSenha(jPSenha.getText());

        //Comando realiza atualizações/modificações na tabela de pessoas de acordo com o codigo do ususario
        String editar = "update pcc_tb_pessoas set pess_st_nome = '"+a.getNome()+"',"
        + " pess_st_rua = '"+a.getRua()+"', "
        + "pess_st_numero = '"+a.getNumero()+"', "
        + "pess_st_complemento = '"+a.getComplemento()+"', "
        + "pess_st_bairro = '"+a.getBairro()+"', "
        + "pess_st_cidade = '"+a.getCidade()+"',"
        + " pess_st_UF ='"+ a.getUf()+"', "
        + "pess_st_DataNasc = '"+a.getDataNasc()+"', "
        + "pess_st_rg = '"+a.getRg()+"', pess_st_cpf = '"+a.getCpf()+"',"
        + " pess_st_tipo = '"+a.getTipo()+"', "+ "pess_st_email ='"+a.getEmail()
        +"', pess_st_senha= '"+a.getSenha()+"',"
        + " Pess_INT_CEP= '"+a.getCep()+"' "
        + " where pess_int_codigo = '"+a.getRA()+"';";

        try {
            c.conectar();
            if(c.runSql(editar)){
                if(a.getTipo().equals("Aluno")){
                    // Se o Tipo for igual a Aluno, realiza update na tabela de Série 
                String editarS = "update pcc_tb_aluno_serie a "
                + "set a.Ano_INT_Codigo = (SELECT b.Serie_INT_Codigo "
                + "from pcc_tb_serie b where b.Serie_ST_Descricao = '"+a.getSerie()+"') "
                + "where a.Aluno_INT_Codigo = '"+a.getRA()+"';";
                    
                c.runSql(editarS);
                }
               
                if(possui_foto == 1){
                    codCaminho = "id_"+jTFCodigo.getText();
                    caminho = "C:\\wamp64\\www\\nodemcu\\fotos\\"+codCaminho+".jpg";
                    try {
                        EnviaImagem();
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IOException ex) {
                        Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                 // Realiza update na foto 
                String saveFoto = "update pcc_tb_pessoas set Pess_JPG_Foto = '"+codCaminho+"' where Pess_INT_Codigo = "+jTFCodigo.getText()+";"; 
                c.runSql(saveFoto);
                JOptionPane.showMessageDialog(null, "Editado com sucesso");
                
                //Registra na tabela de LOG o código do usario que realizou as mudanças!
                log = "Dados do usuário "+jTFCodigo.getText()+" modificados;";
                registroLog = "insert into pcc_tb_log values(null,"+func+",'"+log+"', default);";
                c.runSql(registroLog);
            }else{
                JOptionPane.showMessageDialog(null, "Não foi possivel editar");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else{//Caso algum campo não seja preenchido, é mostrado a mensagem de erro avisando quais campos faltam
            String msg_erro = "Os seguintes campos são obrigatórios e não podem ser vazios:\n";
            int i;
            for(i = 0; i<verifica.size(); i++){
                msg_erro+=verifica.get(i)+"\n";
            }
            JOptionPane.showMessageDialog(this, msg_erro);
        }
    }//GEN-LAST:event_jBEditActionPerformed

    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed

    // TODO add your handling code here:
        Pessoa a = new Pessoa();
        Conexao c = new Conexao();
        
        String TNome = jTFNome.getText().toUpperCase();
        String TData = jFDTNasc.getText();
        String TCodigo = jTFCodigo.getText();
        
        if(TCodigo.equals("")){ // Verifica se o campo de código está vazio
          if(TNome.equals("") || TData.equals("")){ // Verifica o se os campos de nome e data de nascimento vazio
              // Se os dois forem verdadeiros aparecem a mensagem!
                JOptionPane.showMessageDialog(this, "Por Favor digite um código, ou nome e data de nascimento!");
                
          }else{ // Se apenas os campo de nome e data de nascimento estiverem preeenchidos a busca é feita
              String Buscar2 =  "select * from pcc_tb_pessoas where "
                      + "pess_st_nome = '"+TNome+"' and pess_st_datanasc = '"+TData+"';";
              
              try {
                  c.conectar(); // Conecta no banco
                  a=c.pesquisa_aluno(Buscar2);
            if(!c.equals(null)){
                //Insere os valores encotrados no campos correspondentes
                jTFCodigo.setText(String.valueOf(a.getRA()));
                jTFNome.setText(a.getNome());
                jTRua.setText(a.getRua());
                jTNum.setText(a.getNumero());
                jTCidade.setText(a.getCidade());
                jTbairro.setText(a.getBairro());
                jFDTNasc.setText(a.getDataNasc());
                jTCompl.setText(a.getComplemento());
                jTUF.setText(a.getUf());
                jFRg.setText(a.getRg());
                jFCPF.setText(a.getCpf());
                jCTipo.setSelectedItem(a.getTipo());
                jTFEmail.setText(a.getEmail());
                jPSenha.setText(a.getSenha());
                jFCEP.setText(String.valueOf(a.getCep()));
                //
                if(a.getTipo().equals("Aluno")){ // Se o usuario pesquisado for um aluno é feita uma pesquisa da serie dele.
                    
                    String buscaS= "SELECT a.Serie_ST_Descricao from "
                            + "pcc_tb_serie a, pcc_tb_aluno_serie b , pcc_tb_pessoas c "
                            + "where b.Ano_INT_Codigo = a.Serie_INT_Codigo and "
                            + "b.Aluno_INT_Codigo = c.Pess_INT_Codigo AND "
                            + "c.Pess_ST_Nome = '"+TNome+"' and c.Pess_ST_DataNasc = '"+TData+"';";
                    
                    c.conectar();
                    a=c.pesquisa_serie(buscaS);
                    if(!c.equals(null)){
                        jCSerie.setSelectedItem(a.getSerie());
                    }
                }
            }else{ // Se não for encontrado o usuário aparece a mensagem
                JOptionPane.showMessageDialog(null, "Pessoa não encontrada");
            }
                  
              } catch (ClassNotFoundException ex) {
                  Logger.getLogger(TelaCadastroInternal.class.getName()).log(Level.SEVERE, null, ex);
              } catch (SQLException ex) {
                  Logger.getLogger(TelaCadastroInternal.class.getName()).log(Level.SEVERE, null, ex);
              }
              
          }
        }else{
        
        int  cod = Integer.parseInt(jTFCodigo.getText());

        //Comando que faz uma busca no banco de dados de acordo com o Codigo da pessoas
        String buscar= "select * from pcc_tb_pessoas where pess_int_codigo = '"+cod+"';";

        try {
            c.conectar();
            a=c.pesquisa_aluno(buscar);
            if(!c.equals(null)){
                //Insere os valores encotrados no campos correspondentes
                jTFNome.setText(a.getNome());
                jTRua.setText(a.getRua());
                jTNum.setText(a.getNumero());
                jTCidade.setText(a.getCidade());
                jTbairro.setText(a.getBairro());
                jFDTNasc.setText(a.getDataNasc());
                jTCompl.setText(a.getComplemento());
                jTUF.setText(a.getUf());
                jFRg.setText(a.getRg());
                jFCPF.setText(a.getCpf());
                jCTipo.setSelectedItem(a.getTipo());
                jTFEmail.setText(a.getEmail());
                jPSenha.setText(a.getSenha());
                jFCEP.setText(String.valueOf(a.getCep()));
                //
                if(a.getTipo().equals("Aluno")){
                    
                    String buscaS= "SELECT a.Serie_ST_Descricao from pcc_tb_serie a, pcc_tb_aluno_serie b"
                + " where b.Ano_INT_Codigo = a.Serie_INT_Codigo and b.Aluno_INT_Codigo = '"+cod+"';";
                    c.conectar();
                    
                    a=c.pesquisa_serie(buscaS);
                    if(!c.equals(null)){
                        jCSerie.setSelectedItem(a.getSerie());
                    }
                }
            }else{//Se não for encontrado usuario, é mostrado a mensagem de erro
                JOptionPane.showMessageDialog(null, "RA não encontrado");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
        }
        }      
    }//GEN-LAST:event_jBBuscarActionPerformed

    private ArrayList<String> campo_vazio(){
        //Método que verifica quais campos não foram preenhidos  
        ArrayList<String> erro = new ArrayList<>();
        if (jCTipo.getSelectedItem().toString().equals("Selecione...")){
            erro.add("Tipo");
        }
        if(jTFNome.getText().equals("")){
            erro.add("Nome");
        }
        if(jFCEP.getText().equals("")){
            erro.add("CEP");
        }
        if(jTCidade.getText().equals("")){
            erro.add("Cidade");
        }
        if(jTUF.getText().equals("")){
            erro.add("UF");
        }
        if(jTRua.getText().equals("")){
            erro.add("Rua");
        }
        if(jTNum.getText().equals("")){
            erro.add("Número");
        }
        if(jTbairro.getText().equals("")){
            erro.add("Bairro");
        }
        if(jFDTNasc.getText().equals("  /  /    ")){
            erro.add("Data de Nascimento");
        }
        if(jFRg.getText().equals("  .   .   -  ")){
            erro.add("RG");
        }
        if(jFCPF.getText().equals("   .   .   -  ")){
            erro.add("CPF");
        }
        if(jCTipo.getSelectedItem().toString().equals("Responsável") || jCTipo.getSelectedItem().toString().equals("Funcionário")){
            if(jPSenha.getText().equals("")){
                erro.add("Senha");
            }
        }
        if(jCTipo.getSelectedItem().toString().equals("Aluno")){
            if(jCSerie.getSelectedItem().toString().equals("Selecione...")){
                erro.add("Série");
            }
        }
     return erro;   
    }
    
    private void jBCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCadActionPerformed
        verificaData(jFDTNasc.getText());
        ArrayList<String> verifica = campo_vazio();
        String codCaminho = null;
        if(verifica.isEmpty()){
        Pessoa a = new Pessoa();
        Conexao c = new Conexao();
        Pessoa b = new Pessoa();

        
        //Insere os dados preenchidos pelo usuario nas variaveis
        //  a.setRA(Integer.parseInt(jTFCodigo.getText()));
        a.setNome(jTFNome.getText().toUpperCase());
        a.setDataNasc(jFDTNasc.getText());
        a.setTipo((String) jCTipo.getSelectedItem());
        a.setRua(jTRua.getText().toUpperCase());
        a.setNumero(jTNum.getText());
        a.setComplemento(jTCompl.getText().toUpperCase());
        a.setBairro(jTbairro.getText().toUpperCase());
        a.setCidade(jTCidade.getText().toUpperCase());
        a.setUf(jTUF.getText().toUpperCase());
        a.setRg(jFRg.getText());
        a.setCpf(jFCPF.getText());
        a.setSerie((String) jCSerie.getSelectedItem());
        a.setEmail(jTFEmail.getText());
        a.setSenha(jPSenha.getText());
        a.setCep(Integer.parseInt(jFCEP.getText()));

        
        //Comando que cadastra no banco de dados os valores lidos (Tabela: pcc_tb_pessoas)
        String cadastrar = "insert into pcc_tb_pessoas("
        + "Pess_ST_Nome, Pess_ST_Rua, Pess_ST_Numero, Pess_ST_Complemento, "
        + "Pess_ST_Bairro, Pess_ST_Cidade, "
        + "Pess_ST_UF, "
        + "Pess_ST_DataNasc, "
        + "Pess_ST_Rg, Pess_ST_CPF, Pess_ST_Tipo, Pess_ST_Email, Pess_ST_Senha, Pess_ST_Situacao, Pess_INT_CEP) values "
        + "( '"+a.getNome()+"', '"+a.getRua()+"', '"+a.getNumero()+"',"
        + " '"+a.getComplemento()+"', '"+a.getBairro()+"', '"+a.getCidade()+"', "
        + "'"+a.getUf()+"',"
        + " '"+a.getDataNasc()+"', '"+a.getRg()+"', "
        + "'"+a.getCpf()+"', '"+a.getTipo()+"','"+a.getEmail()+"', '"+a.getSenha()+"','Ativado',"+a.getCep()+");";

        try {
            c.conectar();

            if(c.runSql(cadastrar)){
                b = c.Codigo_Cadastrado();
                jTFCodigo.setText(String.valueOf(b.getRA()));
                JOptionPane.showMessageDialog(null, " Cadastrado com sucesso!\n"+" Codigo:"+b.getRA());
                
                //Registra na tabela de LOG o código do usario que realizou o cadastro!
                log = "Cadastro novo usuário. ID: "+b.getRA()+";";
                registroLog = "insert into pcc_tb_log values(null,"+func+",'"+log+"', default);";
                c.runSql(registroLog);
                if(a.getTipo().equals("Aluno")){
                    String CadAluS = "call proc_CadastraAlunoSerie('"+b.getRA()+"' , '"+a.getSerie()+"');";
                    c.runSql(CadAluS);
                    log = "Cadastro aluno "+b.getRA()+" na série "+a.getSerie()+";";
                    registroLog = "insert into pcc_tb_log values(null,"+func+",'"+log+"', default);";
                    c.runSql(registroLog);
                
                }
                    
                if(possui_foto == 1){
                    codCaminho = "id_"+b.getRA();
                }
                
                String saveFoto = "update pcc_tb_pessoas set Pess_JPG_Foto = '"+codCaminho+"' where Pess_INT_Codigo = "+b.getRA()+";"; 
                c.runSql(saveFoto);
            }else{
                JOptionPane.showMessageDialog(null, "Não foi possivel cadastrar!");
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
        }catch (SQLException ex) {
            Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(possui_foto == 1){
            caminho = "C:\\wamp64\\www\\nodemcu\\fotos\\"+codCaminho+".jpg";
        try {
            EnviaImagem();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(TelaCadastro2.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
        }else{
            String msg_erro = "Os seguintes campos são obrigatórios e não podem ser vazios:\n";
            int i;
            for(i = 0; i<verifica.size(); i++){
                msg_erro+=verifica.get(i).toString()+"\n";
            }
            JOptionPane.showMessageDialog(this, msg_erro);
        }

    }//GEN-LAST:event_jBCadActionPerformed

    private void jCTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCTipoActionPerformed
        // TODO add your handling code here:

        //Comando que permite o cadastro de serie caso o tipo for Aluno(jComboBox Tipo)
        if(jCTipo.getSelectedItem().equals("Aluno")){
            jCSerie.setEnabled(true);
        }else{
            jCSerie.setEnabled(false);
        }
    }//GEN-LAST:event_jCTipoActionPerformed

    private void jTFCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCodigoKeyTyped
        char vchar = evt.getKeyChar();
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE)){
            evt.consume();
        }
    }//GEN-LAST:event_jTFCodigoKeyTyped

    private void jFCEPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jFCEPKeyTyped
        char vchar = evt.getKeyChar();
        String cep = jFCEP.getText();
        
        //Limita o campo de CEP apenas para digitos.
        if(cep.length() > 7 ){
            evt.consume();       
        }
        
        if(!(Character.isDigit(vchar)) || (vchar == KeyEvent.VK_BACK_SPACE) || (vchar == KeyEvent.VK_DELETE)){
            evt.consume();
        }
    }//GEN-LAST:event_jFCEPKeyTyped

    private void jFCEPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFCEPActionPerformed
        // TODO add your handling code here:

        
    }//GEN-LAST:event_jFCEPActionPerformed
    public void EnviaImagem() throws FileNotFoundException, IOException {
    
        FileOutputStream out = null;
        FileInputStream in = null;
        int cursor;
    try{
        in = new FileInputStream(conteudo);
        out = new FileOutputStream(caminho);
        while((cursor = in.read())!=-1){
            out.write(cursor);
        }
    }
    finally{
        if(in!=null){
            in.close();
        }
        if(out!=null){
            out.close();
        }
        System.out.println("Foto enviada com sucesso"); 
        possui_foto = 0;
    }
    

}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAddImagem;
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBCad;
    private javax.swing.JButton jBDel;
    private javax.swing.JButton jBEdit;
    private javax.swing.JButton jBGravarRFID;
    private javax.swing.JButton jBLimp;
    private javax.swing.JButton jButCEP;
    private javax.swing.JComboBox<String> jCSerie;
    private javax.swing.JComboBox<String> jCTipo;
    private Codigos.JCTextField jFCEP;
    private javax.swing.JFormattedTextField jFCPF;
    private javax.swing.JFormattedTextField jFDTNasc;
    private javax.swing.JFormattedTextField jFRg;
    private javax.swing.JLabel jLFoto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel5;
    private Codigos.JCPasswordField jPSenha;
    private javax.swing.JPanel jPanel1;
    private Codigos.JCTextField jTCidade;
    private Codigos.JCTextField jTCompl;
    private javax.swing.JTextField jTFCodigo;
    private Codigos.JCTextField jTFEmail;
    private Codigos.JCTextField jTFNome;
    private Codigos.JCTextField jTNum;
    private Codigos.JCTextField jTRua;
    private Codigos.JCTextField jTUF;
    private javax.swing.JTabbedPane jTabbedPane1;
    private Codigos.JCTextField jTbairro;
    // End of variables declaration//GEN-END:variables

    public int getFunc() {
        return func;
    }

    public void setFunc(int func) {
        this.func = func;
    }
}
